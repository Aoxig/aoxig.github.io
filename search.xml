<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>六大设计原则</title>
    <url>/reading-notes/six_design_principle.html</url>
    <content><![CDATA[<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>定义：应该有且仅有一个原因引起类的变更（There should never be more than one reason for a class to change.）</p>
<p>好处：</p>
<ol>
<li>类的复杂性降低，实现什么职责都有清晰明确的定义；</li>
<li>可读性提高；</li>
<li>可维护性高；</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性，维护性都有非常大的帮助。</li>
</ol>
<p>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</p>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>定义：所有引用基类的地方必须能够透明地使用其子类地对象（Functions that use pointers or refenrences to base classes must be able to use objects of derived classed without knowing it.）</p>
<p>通俗来说，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必就能适应。</p>
<ol>
<li><p>子类必须完全实现父类的方法</p>
<p> 如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生“畸变”，则建议断开父子继承关系，采用依赖，聚集，组合等关系代替继承。</p>
</li>
<li><p>子类可以有自己的个性</p>
</li>
<li><p>覆盖或实现父类的方法时输入参数可以被放大</p>
</li>
<li><p>覆写或实现父类的方法时输出结果可以被缩小</p>
</li>
</ol>
<p>采用里氏替换原则的目的就是增强程序的健壮性，版本升级时也可以保持非常好的兼容性。即使增加子类，原有的子类还可以继续运行，在实际项目中，每个子类对应不同的业务含义，使用父类作为参数，传递不同的子类完成不同的业务逻辑。</p>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>定义：High level modules should not depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details.Details should depend upon abstractions.</p>
<p>Java语言理解：</p>
<ul>
<li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的；</li>
<li>接口或抽象类不依赖于实现类；</li>
<li>实现类依赖接口或抽象类。</li>
</ul>
<p>对象的依赖关系有三种方式来传递：</p>
<ul>
<li><p>构造函数传递依赖对象</p>
<pre><code>public interface IDriver{
    public void drive();
}
public class Driver implements IDriver{
    private ICar car;
    //构造函数注入
    public Driver(ICar _car){
        this.car=_car;
    }
    public void drive(){
        this.car.run();
    }
}</code></pre></li>
<li><p>Setter方法传递依赖对象</p>
<pre><code>public interface IDriver{
    public void setCar(ICar car);
    public void drive();
}
public class Driver implements IDriver{
    private ICar car;
    //构造函数注入
    public void setCar(ICar _car){
        this.car=_car;
    }
    public void drive(){
        this.car.run();
    }
}</code></pre></li>
<li><p>接口声明依赖对象</p>
<pre><code>public interface IDriver{
    public void drive(ICar car);
}</code></pre></li>
</ul>
<p><a href="https://github.com/frank-lam/fullstack-tutorial/blob/master/notes/JavaWeb/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAIOC.md" target="_blank" rel="noopener">今天看反转控制的内容，看到一个很有意思的，关于依赖倒置的描述</a></p>
<p>正置</p>
<p><img src="https://github.com/frank-lam/fullstack-tutorial/raw/master/notes/pics/what-is-ioc/ioc1.jpg" alt="https://github.com/frank-lam/fullstack-tutorial/raw/master/notes/pics/what-is-ioc/ioc1.jpg"></p>
<p>这是我们常见的依赖关系，但是一旦要对汽车进行修改就会十分麻烦。换种思路，先设计汽车，再根据汽车去设计车身，底盘，轮胎，将依赖关系倒置，改轮胎就只需要改动轮胎。</p>
<p>倒置</p>
<p><img src="https://github.com/frank-lam/fullstack-tutorial/raw/master/notes/pics/what-is-ioc/ioc2.jpg" alt="https://github.com/frank-lam/fullstack-tutorial/raw/master/notes/pics/what-is-ioc/ioc2.jpg"></p>
<p>把原本的高层建筑依赖底层建筑“倒置”过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现前面的“牵一发动全身”的情况。</p>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>定义：</p>
<ul>
<li>Clients should not be forced to depend upon interfaces that they don’t use.(客户端不应该依赖它不需要的接口。)</li>
<li>The dependency of one class to another one should depend on the smallest possible interface.(类间的依赖关系应该建立在最小的接口上。)</li>
</ul>
<p>通俗一点，接口尽量细化，同时接口中的方法尽量少。</p>
<p>接口隔离原则是对接口进行规范约束，其包含以下4层含义：</p>
<ol>
<li><p>接口要尽量小</p>
<p> 这是接口隔离原则的核心定义，不出现臃肿的接口，但是‘小’是有限度的，不能违反单一职责原则。</p>
</li>
<li><p>接口要高内聚</p>
<p> 提高接口，类，模块的处理能力，减少对外的交互。</p>
</li>
<li><p>定制服务</p>
</li>
<li><p>接口设计是有限度的</p>
<p> 接口的设计粒度越小，系统越灵活，但是灵活就会带来结构的复杂化，增加开发难度，所以接口设计要注意适度。</p>
</li>
</ol>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>定义：一个对象应该对其他对象有最少的了解。</p>
<p>迪米特法则对类的低耦合提出了明确的要求，其包含以下4层含义：</p>
<ol>
<li><p>只和朋友交流</p>
<p> 朋友就是朋友类，出现在成员变量，方法的输入输出参数中的类。</p>
<pre><code>public class Teacher{
    //老师对学生发布命令，数一下女生
    public void commond(GroupLeader groupLeader){
        List listGirls=new ArrayList();
        //初始化女生
        for(int i=0;i&lt;20;i++){
            listGirls.add(new Girl());
        }
        //告诉体育委员开始执行任务
        groupLeader.countGirls(listGirls);
    }
}</code></pre><p> Teacher只和GroupLeader是朋友类，但是和Girl类有了交流就违法了迪米特法则。</p>
</li>
<li><p>朋友也是有距离的</p>
<p> 一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。在设计时需要反复衡量：是否还可以再减少public方法和属性，是否可以修改位private，package-private，protected等访问权限，是否可以加上final关键字等。</p>
</li>
<li><p>是自己的就是自己的</p>
</li>
<li><p>谨慎使用Serializable</p>
</li>
</ol>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>定义：Sofeware entities like classes,modules and functions should be open for extension but closed for modifications.（一个软件实体如类，模块和函数应该对扩展开放，对修改关闭。）</p>
<p>一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化。软件实体包括：</p>
<ol>
<li>项目或软件产品中按照一定的逻辑规则划分的模块。</li>
<li>抽象和类</li>
<li>方法</li>
</ol>
<p>开闭原则对扩展开放，对修改关闭，并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础</title>
    <url>/others/gitbase.html</url>
    <content><![CDATA[<h1 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h1><h2 id="第一次上传项目"><a href="#第一次上传项目" class="headerlink" title="第一次上传项目"></a>第一次上传项目</h2><ol>
<li><p>在要上传的文件夹右键点击git bash here;</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>links</title>
    <url>/others/links.html</url>
    <content><![CDATA[<h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p><a href="https://github.com/frank-lam/fullstack-tutorial/" target="_blank" rel="noopener">fullstack tutorial 2020</a></p>
<a id="more"></a>
<p><a href="https://github.com/danistefanovic/build-your-own-x/" target="_blank" rel="noopener">Build your own (insert technology here)</a><br><a href="https://github.com/resumejob/free-project-course/" target="_blank" rel="noopener">整理和搜集网络免费的项目实战课程</a><br><a href="https://github.com/biezhi/java-bible" target="_blank" rel="noopener">java-bible</a></p>
<h1 id="interview"><a href="#interview" class="headerlink" title="interview"></a>interview</h1><p><a href="https://hit-alibaba.github.io/interview/index.html" target="_blank" rel="noopener">笔试面试知识整理</a><br><a href="https://lucifer.ren/fe-interview/#/" target="_blank" rel="noopener">大前端面试宝典</a></p>
<h1 id="Spring-related"><a href="#Spring-related" class="headerlink" title="Spring related"></a>Spring related</h1><p><a href="http://www.ityouknow.com/spring-boot.html" target="_blank" rel="noopener">纯洁的微笑Springboot</a></p>
<h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><p><a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener">LeetCode Solutions: A Record of My Problem Solving Journey</a><br><a href="https://leetcode.com/discuss/general-discussion/460599/blind-75-leetcode-questions" target="_blank" rel="noopener">Blind 75 LeetCode Questions
</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>好的婚姻，要守护财产和爱</title>
    <url>/reading-notes/good_marriage.html</url>
    <content><![CDATA[<p><a href="https://book.douban.com/subject/34905537/" target="_blank" rel="noopener">好的婚姻，要守护财产和爱（吴杰臻律师重磅力作！）</a></p>
<p>全书看得很快，很多法条其实也没有记住，但是对书名算是有了深刻的理解了。虽然大家结婚的时候都不会去考虑说我以后离婚的时候该怎么怎么样，但是通过咨询律师去签订一些协议，去规避一些风险是十分有必要的。</p>
<a id="more"></a>

<p>整本书读完觉得结婚好难，如果婚姻做不到彼此信任，很容易被另一方伤害。</p>
<p>书里面提到一个婚姻剩余价值理论很有意思，对于家庭主妇来说，如果选择在家带小孩，那么在同样的时间里，伴侣在职业过程中，经验技能得到提高，但是家庭主妇却很难再出去工作，一定程度上是对伴侣的一种剥削。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>法律</tag>
      </tags>
  </entry>
  <entry>
    <title>QA数据库设计</title>
    <url>/Java/good_marriage.html</url>
    <content><![CDATA[<p>要做的是一个类似百度知道的校园问答小程序</p>
<p><a href="https://www.notion.so/9feab259a4db4566a12dc696009ddcf3" target="_blank" rel="noopener">数据库QA</a></p>
<p><a href="https://www.notion.so/beefe065b8744f29a41e354459e1e831" target="_blank" rel="noopener">user</a></p>
<p><a href="https://www.notion.so/083f6ff0aade49f68443d83a756d77cb" target="_blank" rel="noopener">admin</a></p>
<p><a href="https://www.notion.so/64a77ecdb1a04a41acd77b56a41affb0" target="_blank" rel="noopener">admin_role</a></p>
<p><a href="https://www.notion.so/e16f2ae7b75b477a89fb7b024d2ee437" target="_blank" rel="noopener">question</a></p>
<p><a href="https://www.notion.so/a6149255282542f8bb52434c3eae3c05" target="_blank" rel="noopener">answer</a></p>
<p><a href="https://www.notion.so/84446d4773ee4c119f5a4f402de978f2" target="_blank" rel="noopener">message</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
